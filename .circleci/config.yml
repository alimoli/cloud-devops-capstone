version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.2

jobs:

  # Install dependencies using yarn
  deps:
    docker:
      - image: circleci/node:12.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - react-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Install yarn
          command: |
            npm install yarn
      - run:
          name: Install dependencies
          command: |
            yarn install
      - save_cache:
          paths: [node_modules]
          key: react-${CIRCLE_WORKFLOW_ID}

  # Check code quality
  check:
    docker:
      - image: circleci/node:12.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - react-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Lint code
          command: |
            yarn lint
      - run:
          name: Test code
          command: |
            yarn test

  # Install dependencies using yarn
  build:
    docker:
      - image: circleci/node:12.16.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - react-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Build react app
          command: |
            yarn build
      - save_cache:
          paths: [build]
          key: react-build-${CIRCLE_WORKFLOW_ID}

  # Dockerize react application
  dockerize:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - react-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Login to the registry
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Build docker image
          command: |
            docker build -t limoli/capstone:$CIRCLE_BRANCH .
      - run:
          name: Deploy docker image
          command: |
            docker push limoli/capstone:$CIRCLE_BRANCH
      - save_cache:
          paths: [~/.docker]
          key: docker-${CIRCLE_WORKFLOW_ID}

  # Deploy to K8S cluster
  deploy:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-${CIRCLE_WORKFLOW_ID}
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get services
      - run:
          command: |
            kubectl create secret generic regcred \
            --from-file=.dockerconfigjson=.docker/config.json \
            --type=kubernetes.io/dockerconfigjson
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deploy/prod.yml
          resource-name: deployment/react-app
          show-kubectl-command: true

workflows:
  default:
    jobs:
      - deps
      - check:
          requires: [deps]
      - build:
          requires: [check]
      - dockerize:
          requires: [build]
      - deploy:
          cluster-name: prod
          requires: [dockerize]
